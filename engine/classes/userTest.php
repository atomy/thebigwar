<?php
// Call userTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'userTest::main');
}

require_once 'PHPUnit/Framework.php';
require_once '../../include/config_inc.php';
require_once TBW_ROOT.'engine/include.php' ;
require_once TBW_ROOT.'engine/classes/galaxy.php';
require_once TBW_ROOT.'db_things/testConstants.php';

/**
 * Test class for user.
 * Generated by PHPUnit on 2009-10-31 at 06:39:22.
 */
class userTest extends PHPUnit_Framework_TestCase
{
	private $testData;
	
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('userTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
    	$this->testData = new TestData();
	}

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown()
    {
		Classes::resetInstances();

		foreach( $this->test_Users as $index => $uarray )
		{
			$uname = $uarray[0];
			user_control::removeUser( $uname );
		}

		Classes::resetInstances();

		$this->_tearDown_DeleteDir(global_setting("DB_PLAYERS"));
		$this->_tearDown_DeleteDir(global_setting("DB_FLEETS"));

	}

	protected function _tearDown_DeleteDir( $dir )
	{
		
		$exclude = array('.', '..');
		$files = array_diff(scandir($dir), $exclude);
		   
		foreach($files as $value)
		{
			$fname = $dir."/".$value;

			if(!is_dir($fname) && is_file($fname) && is_writable($fname) )
			{
				unlink( $fname );
			}
		}
	}

	/**
	 * test our test setup
	 */
	public function testSetup()
	{
        if ( $this->skipOldTests )
			$this->markTestSkipped();

		foreach( $this->test_Users as $index => $usrarray )
		{
			$this->_testSetup( $usrarray[0] );
		}
	}

	public function _testSetup( $user )
	{
        $this->assertTrue( User::userExists( $this->testUname1 ) );

        for( $i = 0; $i <= $this->_testAndGetMaxPlanets(); $i++ )
        {
            if ( isset( $this->test_PlanetCreated[$user->getName()][$i] ) && $this->test_PlanetCreated[$user->getName()][$i] )
            {
                $this->assertTrue( $user->setActivePlanet( $i ) );
                $this->assertTrue( $user->planetExists( $i ) );
                $this->assertEquals( $this->test_PlanetNames[$user->getName()][$i], $user->planetName() );
                $this->_testPlanetItems( $user, $i );
            }
            else
            {
                $this->assertFalse( $user->setActivePlanet( $i ) );
                $this->assertFalse( $user->planetExists( $i ) );
                //$this->assertFalse( $user->planetName() ); // doesnt work, cause we couldnt change to that planet with setActivePlanet()
            }
        }
	}

	public function _testPlanetItems( $user, $planet = false )
	{
		$this->assertGreaterThanOrEqual( 0, $planet );
		
		$user->setActivePlanet( $planet );
	
		foreach( $this->random_ItemLevels[$user->getName()][$planet] as $key => $value )
		{
			$lvl = $user->getItemLevel( $key, false, false );
			$this->assertEquals( $value, $lvl, '_testPlanetItems() expected level didnt match for given item '.$key.' wanted: '.$value.' got: '.$lvl );
		}
	}

	/**
	 * check new user creation
	 */
	public function	testCreate()
	{
		if ( $this->skipOldTests )
			$this->markTestSkipped();

		// new user
		$newuser = Classes::User( $this->testUname3 );

		// already exists
		$dupuser = Classes::User( $this->testUname1 );

		$this->assertTrue( $newuser->create(), "couldnt create user" );

		$this->test_Users[] = array( $newuser,  $this->testUname3, true );

		$this->assertFalse( $dupuser->create(), "could create user which already exist" );
	}

	public function testUserExists()
	{
		if ( $this->skipOldTests )
			$this->markTestSkipped();

		$this->assertTrue( User::userExists( $this->testUname1 ), "user which was created doesnt exist" );
		$this->assertFalse( User::userExists( $this->testNoUname ), "user which wasnt created does exist" );
		$this->assertFalse( User::userExists( NULL ), "func returned true but no name was given as parameter" );
	}

	public function testPlanetExists()
	{
		if ( $this->skipOldTests )
			$this->markTestSkipped();

		// get our very fist user for testing
		$user = newUser($this->test_Users[0][0]);

		$this->assertTrue( $user->planetExists( 0 ), "planet setup but doesnt exist" );

		for( $i = 0; $i <= $this->_testAndGetMaxPlanets(); $i++ )
		{
			if ( isset( $this->test_PlanetCreated[$user->getName()][$i] ) && $this->test_PlanetCreated[$user->getName()][$i] )
				$this->assertTrue( $user->planetExists( 0 ), "planet setup but doesnt exist" );
			else
				$this->assertFalse( $user->planetExists( $i ), "planet shouldnt exist" );
		}

		// call it with an initialised user but which doesnt exists
		$fuser = Classes::User( "fakeuser1337" );

		for( $i = 0; $i <= $this->_testAndGetMaxPlanets(); $i++ )
		{
			$this->assertFalse( $fuser->planetExists( $i ), "planet shouldnt exists on non-existing user" );
		}
	}

	public function testSetActivePlanet()
	{
		if ( $this->skipOldTests )
			$this->markTestSkipped();

        // get our very fist user for testing
        $user = Classes::User($this->test_Users[0][0]);

		$fuser = Classes::User( "fakeuser1338" );

		$this->assertTrue( $user->setActivePlanet( 0 ), "setting active planet to existing one should work" );

		for( $i = 0; $i <= $this->_testAndGetMaxPlanets(); $i++ )
		{
			$this->assertFalse( $fuser->setActivePlanet( $i ), "planet shouldnt be setable on non-existant user" );
		}
	}

	public function testGetPlanetByPos()
	{
		if ( $this->skipOldTests )
			$this->markTestSkipped();

        // get our very fist user for testing
		$uname = $this->test_Users[0][0];
        $user = Classes::User($uname);

		$fuser = Classes::User( "fakeuser1339" );

		$this->assertFalse( $fuser->getPlanetByPos( false ) );

		for( $i = 0; $i <= TEST_MAX_GALAXIES; $i++ )
		{
			for( $k = 0; $k <= TEST_MAX_SYSTEMSINGALAXY; $k++ )
			{
				for( $m = 0; $m <= TEST_MAX_PLANETSINSYSTEM; $m++ )
				{
					$pos = $i.":".$k.":".$m;
					$bMyPlanet = false;

					foreach( $this->test_PlanetCreated[$uname] as $planet => $isCreated )
					{
						if ( $pos == $this->test_PlanetCoordinates[$uname][$planet] && $isCreated )
						{
							$bMyPlanet = true;
							$this->assertEquals( $planet, $user->getPlanetByPos( $pos ) );
//							echo "found mah planet @ ".$pos."\n"; 
						}
					}

					if ( !$bMyPlanet )
						$this->assertFalse( $user->getPlanetByPos( $pos ) );
				}
			}
		}
	}

	/*
	 * checking if the returned planetlist is the same as our one of the created planets
	 */
	public function testGetPlanetsList()
	{
        if ( $this->skipOldTests )
			$this->markTestSkipped();

		// get our very fist user for testing
        $user = Classes::User($this->test_Users[0][0]);		

		$fuser = Classes::User( "fakeuser1340" );

		$this->assertFalse( $fuser->getPlanetsList() );

		$planets = $user->getPlanetsList();
	
		for( $i = 0; isset( $planets[$i] ) || isset( $this->test_PlanetCreated[$user->getName()][$i] ); $i++ )
		{
			$this->assertTrue( isset( $planets[$i] ) );
			$this->assertTrue( isset( $this->test_PlanetCreated[$user->getName()][$i] ) );
		}
	}

    /*
     * checking if the returned planetlist is the same as our one of the created planets
     */
    public function testRemovePlanet()
    {
        if ( $this->skipOldTests && 0 )
            $this->markTestSkipped();

        // get our very fist user for the fleet start pos, using active planet
		$uname = $this->test_Users[0][0];
        $user = Classes::User( $uname );

		$fuser = Classes::User( "fakeuser1341" );

		$this->assertFalse( $fuser->removePlanet() );

		/*
		 * fleet zurueckrufen welche zu plani unterwegs ist - testen
		 */
		 /*
		$koords = $user->getPosString();
		$i = 0;

		while( $koords == $user->getPosString() && $i < 100 )
		{
			$i++;
			$usr = array_rand( $this->test_PlanetCoordinates );
			$planet = array_rand( $this->test_PlanetCoordinates[$usr] );
			$koords = $this->test_PlanetCoordinates[$usr][$planet];

			$this->assertLessThan( 100, $i );
		}
		*/

		// set active planet to 0 and send fleet to planet 1
		$user->setActivePlanet(0);
		$this->_testSendFleetTo( $uname, $this->test_PlanetCoordinates[$uname][1] );
	}

	/*
	 * send a fleet and test if it were created
	 * the actual testing it derivated into a sub method
	 */
	public function _testSendFleetTo( $uname, $pos )
	{
		$fleet = Classes::Fleet();
		$user = Classes::User($uname);
		$mypos =  $user->getPosString();
		unset($user);

//		echo "\nflying from: ".$mypos. " to: ".$pos."\n";
	
		/*
		 * flotte als transport mit 10 kleinen transportern zum ziel $pos versenden
		 */

		$type = 6; // stationieren
		$fleet->create(); // no return 
		$this->test_Fleets[$uname][] = $fleet->getName();
		$this->assertTrue( $fleet->addTarget( $pos, $type, false ) );
		$this->assertEquals( $uname, $fleet->addUser( $uname, $mypos, 1 /* default */ ) );
		$this->assertTrue( $fleet->addTransport( $uname, array( 0, 0, 0, 0, 0 ), array() ) );
		$this->assertTrue( $fleet->addFleet( "S1", 100, $uname) );
		$this->assertTrue( $fleet->addHoldTime( 0 ) );
		$this->assertGreaterThan( 0, $fleet->calcNeededTritium( $uname) );
		$fleet->start(); // no return
		$this->assertEquals( $pos, $fleet->getCurrentTarget() );

		$user = Classes::User($uname);
		$this->assertTrue( $user->addFleet( $fleet->getName() ) );
		unset($user);
		unset($fleet);

		$this->_testIsFleetExistingSpecific( $uname, $pos, $mypos, array( "S1", 10 ), $type );
				
        // core func, remove the planet
        $user = Classes::User( $uname );
		$this->assertTrue($user->setActivePlanet(1));

        $this->assertTrue($user->removePlanet());
        unset($user);
        
		$fleet_obj = Classes::Fleet( $this->test_Fleets[$uname][0] );
        // check if the fleet was sent back
        $this->assertTrue( $fleet_obj->isFlyingBack() );
		//unset($fleet_obj);

        // check if planet still exists
        $galaxy = Classes::Galaxy(1);
        $koords = explode( $mypos );
        $this->assertFalse( $galaxy->getPlanetOwner( $koords[1], $koords[2] ) );

	}

	/*
	 * test if a given fleet is existant, it is expected to do, otherwise this test will fail
	 */
	public function _testIsFleetExistingSpecific( $from_user, $to_pos, $from_pos, $ships, $type )
	{
		$user = Classes::User($from_user);
		$fleets = $user->getFleetsList();

		$this->assertGreaterThan( 0, count( $fleets ), "no fleets found" );

		$fleet = false;

		foreach( $fleets as $ffleet )
		{
		 	$fleet = $ffleet;
		}
	
		if ( $fleet == false )
			throw new Exception( "_testIsFleetExistingSpecific() failed, no fleet found" );
		
		$fleet_obj = Classes::Fleet( $fleet );
		$that = Classes::Fleet( $fleet );
		$blub =	$user->getFleetsWithPlanet();
		
		unset( $user );

		$targets = $that->getTargetsList();

		$this->assertEquals( array( $to_pos ), $targets );
		$this->assertEquals( array( "S1" => 100 ), $fleet_obj->getFleetList( $from_user) );
		$this->assertFalse( $fleet_obj->isFlyingBack() );
	}

	public function _testAndGetMaxPlanets()
	{
		$maxplanets = global_setting( "MAX_PLANETS" );

		$this->assertGreaterThan( 1, $maxplanets );

		return $maxplanets;
	}

}

// Call userTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'userTest::main') 
{
    userTest::main();
}
?>
