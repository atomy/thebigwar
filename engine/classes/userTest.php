<?php
// Call userTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'userTest::main');
}

require_once 'PHPUnit/Framework.php';
require_once '../../include/config_inc.php';
require_once( TBW_ROOT.'engine/include.php' );
require_once( TBW_ROOT.'engine/classes/galaxy.php' );

define( 'TEST_MAX_GALAXIES', 2 );
define( 'TEST_MAX_SYSTEMSINGALAXY', 999 );
define( 'TEST_MAX_PLANETSINSYSTEM', 50 );

/**
 * Test class for user.
 * Generated by PHPUnit on 2009-10-31 at 06:39:22.
 */
class userTest extends PHPUnit_Framework_TestCase
{
	private $testUname = 'helmut';
	private $testCreateUname = 'hans';
	private $testNoUname = 'randomusernotcreatedbefore';
	private $userObj = NULL;

	// used during development, skip tests which are working
	private $skipOldTests = true;

	/*
	 * keeps the random item levels which were set to make sure they were set
	 * array( planet, array( itemID, itemLevel ) )
	 */
	private $random_ItemLevels = array();

	// this holds planets which we created, values = boolean
	private $test_PlanetCreated = array();
	
	// this holds the names of our planets, values = string
	private $test_PlanetNames = array();

	// this holds the koordinates of our planets, values = string
	private $test_PlanetCoordinates = array();

    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('userTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
		// define_globals( Uni ); to set globals like where db files are located etc
		define_globals( 'TestUni1' );

		$this->userObj = new User( $this->testUname );
		$this->userObj->create();

		if ( !$this->userObj->getStatus() )
			throw new Exception( 'setUp() failed, borken status returned' );

		$this->test_PlanetNames[0] = "MainPlanet";
		$this->test_PlanetNames[1] = "TestPlanet1";
		$this->test_PlanetCreated[0] = true;
		$this->test_PlanetCreated[1] = true;

		$this->setUp_NewPlanet( $this->test_PlanetNames[0] );
		$this->setUp_NewPlanet( $this->test_PlanetNames[1] );

		$this->setUp_RandomizePlanet( 0, true );
		$this->setUp_RandomizePlanet( 1, false );
    }

	/*
	 * helper func for setting up a random planet,
	 * sets and gets back random item levels for each class
	 */
	protected function setUp_RandomPlanet( $research = false )
	{
		$user = &$this->userObj;
		$random_ItemLevels = array();

		$random_ItemLevels = array_merge( $random_ItemLevels, $this->setUp_RandomItemClass( 'gebaeude' ) );
		$random_ItemLevels = array_merge( $random_ItemLevels, $this->setUp_RandomItemClass( 'roboter' ) );
		$random_ItemLevels = array_merge( $random_ItemLevels, $this->setUp_RandomItemClass( 'schiffe' ) );
		$random_ItemLevels = array_merge( $random_ItemLevels, $this->setUp_RandomItemClass( 'verteidigung' ) );

		if ( $research )
			$random_ItemLevels = array_merge( $random_ItemLevels, $this->setUp_RandomItemClass( 'forschung' ) );

		return $random_ItemLevels;
	}

	/*
	 * setting up random items for a given class on the active planet
	 * @args $class - name the class for which all available items should be randomized
	 * @return - returns a list of the random levels with the id as key
	 */
	protected function setUp_RandomItemClass( $class )
	{
		$user = &$this->userObj;
		$minlvl = 0;
		$maxlvl = 0;

		switch( $class )
		{
			case 'gebaeude' :
				$minlvl = 0;
				$maxlvl = 20;
			break;

			case 'roboter' :
				$minlvl = 0;
				$maxlvl = 200;
			break;

			case 'schiffe' :
				$minlvl = 0;
				$maxlvl = 9999;
			break;

			case 'verteidigung' :
				$minlvl = 0;
				$maxlvl = 9999;
			break;

			case 'forschung' :
				$minlvl = 0;
				$maxlvl = 20;
			break;

			default:
				throw new Exception( 'setUp_RandomItemClass() called with unsupported class: '.$class );
			break;
		}

        $randomItemLevels = array();
        $itemList = $user->getItemsList( $class );

		if ( !$itemList )
			throw new Exception( 'setUp_RandomItemClass() couldnt get ItemsList of class: '.$class );

		foreach( $itemList as $item )
		{
			$randomLevel = rand( $minlvl, $maxlvl );
			$randomItemLevels[$item] = $randomLevel;
			$user->changeItemLevel( $item, $randomLevel, $class );
		}

		return $randomItemLevels;
	}

	/*
	 * sets up a new planet
	 * @args $name - name of the new planet
	 */
	protected function setUp_NewPlanet( $name = false )
	{
		$user = &$this->userObj;

		if ( !$this->setUp_addPlanet( $name ) )
			throw new Exception( 'setUp_MainPlanet() failed, setUp_addPlanet() returned false' );
	}

	/*
	 * this func will randomize all levels for buildings, research, robots and ships on a given planet
	 * and return its values for asserting
	 *
	 * @args $planet - planet which will be the target
	 * @return array() - array containing the random levels
	 */	
	protected function setUp_RandomizePlanet( $planet, $research = false )
	{
		$user = &$this->userObj;

		if ( !$user->planetExists( $planet ) )
		{
			throw new Exception( 'setUp_RandomizePlanet() called with a non existant planet: '.$planet );
		}

		$user->setActivePlanet( $planet );
		$this->random_ItemLevels[$planet] = $this->setUp_RandomPlanet( $research );
	}

	/* 
	 * adds another planet to the user
	 */
	protected function setUp_addPlanet( $name = false )
	{
        $user = &$this->userObj;

        $koords = getFreeKoords();

        if( $koords )
        {
            $index = $user->registerPlanet( $koords );

            if ( $index === false )
                throw new Exception( 'setUp_MainPlanet() failed, couldnt setup planet on given coordinates - '.$koords );
            else
            {
                $user->setActivePlanet( $index );

				if ( $name )
	                $user->planetName( $name );

				$this->test_PlanetCoordinates[$index] = $koords;

				return true;
            }
        }
        else
            throw new Exception( 'setUp_MainPlanet() failed, no free coordinates for setting up planet' );		
	}

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown()
    {
		$user = &$this->userObj;
		$ufname = $user->getFileName();
		$user->__destruct();
		unset( $user );

		// remove the testusers
		user_control::removeUser( $this->testUname );
		user_control::removeUser( $this->testCreateUname );

		if ( User::userExists( $this->testUname ) )
		{
			if ( is_file( $ufname ) )
				unlink( $ufname );
		}

		if ( User::userExists( $this->testCreateUname ) )
		{
			$newuser = new User( $this->testCreateUname );

			if ( is_file( $newuser->getFileName() ) )
				unlink( $newuser->getFileName() );
		}
	}

	/**
	 * test our test setup
	 */
	public function testSetup()
	{
        if ( $this->skipOldTests )
			$this->markTestSkipped();

		$user = &$this->userObj;

		$this->assertTrue( User::userExists( $this->testUname ) );
	
		for( $i = 0; $i <= $this->_testAndGetMaxPlanets(); $i++ )
		{
			if ( isset( $this->test_PlanetCreated[$i] ) && $this->test_PlanetCreated[$i] )
			{
				$this->assertTrue( $user->setActivePlanet( $i ) );
				$this->assertTrue( $user->planetExists( $i ) );
				$this->assertEquals( $this->test_PlanetNames[$i], $user->planetName() );
				$this->_testPlanetItems( $i );
			}
			else
			{
				$this->assertFalse( $user->setActivePlanet( $i ) );
				$this->assertFalse( $user->planetExists( $i ) );
				//$this->assertFalse( $user->planetName() ); // doesnt work, cause we couldnt change to that planet with setActivePlanet()
			}
		}
	}

	public function _testPlanetItems( $planet = false )
	{
		$user = &$this->userObj;

		$this->assertGreaterThanOrEqual( 0, $planet );
		
		$user->setActivePlanet( $planet );
	
		foreach( $this->random_ItemLevels[$planet] as $key => $value )
		{
			$lvl = $user->getItemLevel( $key, false, false );
			$this->assertEquals( $value, $lvl, '_testPlanetItems() expected level didnt match for given item '.$key.' wanted: '.$value.' got: '.$lvl );
		}
	}

	/**
	 * check new user creation
	 */
	public function	testCreate()
	{
		if ( $this->skipOldTests )
			$this->markTestSkipped();

		$newuser = new User( $this->testCreateUname );
		$dupuser = new User( $this->testUname );

		$this->assertTrue( $newuser->create(), "couldnt create user" );
		$this->assertFalse( $dupuser->create(), "could create user which already exist" );
	}

	public function testUserExists()
	{
		if ( $this->skipOldTests )
			$this->markTestSkipped();

		$this->assertTrue( User::userExists( $this->testUname ), "user which was created doesnt exist" );
		$this->assertFalse( User::userExists( $this->testNoUname ), "user which wasnt created does exist" );
		$this->assertFalse( User::userExists( NULL ), "func returned true but no name was given as parameter" );
	}

	public function testPlanetExists()
	{
		if ( $this->skipOldTests )
			$this->markTestSkipped();

		$user = &$this->userObj;

		$this->assertTrue( $user->planetExists( 0 ), "planet setup but doesnt exist" );

		for( $i = 0; $i <= $this->_testAndGetMaxPlanets(); $i++ )
		{
			if ( isset( $this->test_PlanetCreated[$i] ) && $this->test_PlanetCreated[$i] )
				$this->assertTrue( $user->planetExists( 0 ), "planet setup but doesnt exist" );
			else
				$this->assertFalse( $user->planetExists( $i ), "planet shouldnt exist" );
		}

		// call it with an initialised user but which doesnt exists
		$fuser = new User( "fakeuser1337" );

		for( $i = 0; $i <= $this->_testAndGetMaxPlanets(); $i++ )
		{
			$this->assertFalse( $fuser->planetExists( $i ), "planet shouldnt exists on non-existing user" );
		}
	}

	public function testSetActivePlanet()
	{
		if ( $this->skipOldTests )
			$this->markTestSkipped();

		$user = &$this->userObj;
		$fuser = new User( "fakeuser1338" );

		$this->assertTrue( $user->setActivePlanet( 0 ), "setting active planet to existing one should work" );

		for( $i = 0; $i <= $this->_testAndGetMaxPlanets(); $i++ )
		{
			$this->assertFalse( $fuser->setActivePlanet( $i ), "planet shouldnt be setable on non-existant user" );
		}
	}

	public function testGetPlanetByPos()
	{
		if ( $this->skipOldTests )
			$this->markTestSkipped();

		$user = &$this->userObj;
		$fuser = new User( "fakeuser1339" );

		$this->assertFalse( $fuser->getPlanetByPos( false ) );

		for( $i = 0; $i <= TEST_MAX_GALAXIES; $i++ )
		{
			for( $k = 0; $k <= TEST_MAX_SYSTEMSINGALAXY; $k++ )
			{
				for( $m = 0; $m <= TEST_MAX_PLANETSINSYSTEM; $m++ )
				{
					$pos = $i.":".$k.":".$m;
					$bMyPlanet = false;

					foreach( $this->test_PlanetCreated as $planet => $isCreated )
					{
						if ( $pos == $this->test_PlanetCoordinates[$planet] && $isCreated )
						{
							$bMyPlanet = true;
							$this->assertEquals( $planet, $user->getPlanetByPos( $pos ) );
							echo "found mah planet @ ".$pos."\n"; 
						}
					}

					if ( !$bMyPlanet )
						$this->assertFalse( $user->getPlanetByPos( $pos ) );
				}
			}
		}
	}

	/*
	 * checking if the returned planetlist is the same as our one of the created planets
	 */
	public function testGetPlanetsList()
	{
        if ( $this->skipOldTests )
			$this->markTestSkipped();

		$user = &$this->userObj;
		$fuser = new User( "fakeuser1340" );

		$this->assertFalse( $fuser->getPlanetsList() );

		$planets = $user->getPlanetsList();
	
		for( $i = 0; isset( $planets[$i] ) || isset( $this->test_PlanetCreated[$i] ); $i++ )
		{
			$this->assertTrue( isset( $planets[$i] ) );
			$this->assertTrue( isset( $this->test_PlanetCreated[$i] ) );
		}
	}

    /*
     * checking if the returned planetlist is the same as our one of the created planets
     */
    public function testRemovePlanet()
    {
        if ( $this->skipOldTests && false )
            $this->markTestSkipped();

		
	}

	public function _testAndGetMaxPlanets()
	{
		$maxplanets = global_setting( "MAX_PLANETS" );

		$this->assertGreaterThan( 1, $maxplanets );

		return $maxplanets;
	}

}

// Call userTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'userTest::main') 
{
    userTest::main();
}
?>
