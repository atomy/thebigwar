<?php

// Call userTest::main() if this source file is executed directly.
if ( ! defined( 'PHPUnit_MAIN_METHOD' ) )
{
    define( 'PHPUnit_MAIN_METHOD', 'userTest::main' );
}

require_once 'PHPUnit/Framework.php';

if ( is_file( '../../../include/config_inc.php' ) )
{
    require_once '../../../include/config_inc.php';
}
else 
    if ( is_file( '../include/config_inc.php' ) )
    {
        require_once '../include/config_inc.php';
    }
    else 
    {
        require_once 'include/config_inc.php';
    }

require_once TBW_ROOT . 'engine/include.php';
require_once TBW_ROOT . 'engine/classes/galaxy.php';
require_once TBW_ROOT . 'test/TestData/TestConstants.php';
require_once TBW_ROOT . 'test/TestData/TestData.php'; 
require_once TBW_ROOT . 'test/TestData/Tester.php';
require_once TBW_ROOT . 'test/TestData/TestMessage.php';

/**
 * Test class for user.
 * Generated by PHPUnit on 2009-10-31 at 06:39:22.
 */
class userTest extends PHPUnit_Framework_TestCase
{
    private $testData;

    /**
     * tests if all researches within testData exists on the user itself
     * @param User $user
     * @param TestPlanet $planetData
     * @return -
     */
    public function _testActiveResearch( &$user, &$planetData )
    {
        $this->assertTrue( $user->setActivePlanet( $planetData->getIndex() ) );
        
        $research = $planetData->getActiveResearch();
        
        if ( $research == false )
            return;
            //		else
        //			print "testing research...\n";
        

        $aForschung = $user->checkBuildingThing( "forschung" );
        
        $this->assertEquals( $research->getId(), $aForschung[0], "failed comparing research id on planet " . $user->getActivePlanet() . " on user " . $user->getName() . "\n" );
        $this->assertEquals( $research->getGlobal(), $aForschung[2] );
        
        if ( $research->isGlobal() )
        {
            $this->assertEquals( $research->getStartPlanet(), $aForschung[4], "_testActiveResearch() failed for user " . $user->getName() . " planet: " . $user->getActivePlanet() . "\n" );
        }
        else
        {
            $this->assertFalse( isset( $aForschung[4] ) );
        }
    }

    /**
     * tests if users messages equals their messages stored within the testdata
     * @param string $uname
     * @return -
     */
    public function _testMessages( $uname )
    {
        $user = Classes::User( $uname );
        $testUser = $this->testData->getUserWithName( $uname );
        $testMsgs = $testUser->getMessages();
        $i = 0;
        
        foreach ( $testMsgs as $testMsg )
        {
            $found = 0;
            
            foreach ( $user->getMessagesList( $testMsg->getType() ) as $msg )
            {
                $msgObj = Classes::Message( $msg );
                
                if ( $msgObj->rawText() == $testMsg->getText() && $testMsg->getText() != "" )
                {
                    if ( $msgObj->getSubject() == $testMsg->getSubject() && $testMsg->getSubject() != "" )
                    {
                        if ( $msgObj->from( $uname ) == $testMsg->getFrom() )
                        {
                            $found ++;
                        }
                        else
                            echo "from doesnt match\n";
                    }
                    else
                        echo "subject doesnt match\n";
                }
                else
                    echo "test doesnt match - expected: \n" . $testMsg->getText() . "\n == \n" . $msgObj->rawText() . "\n";
            }
            $this->assertEquals( 1, $found );
        }
        $this->greaterThan( 0, $i );
    }

    /**    
	 * send a fleet and test if it were created
	 * the actual testing it derivated into a sub method
	 */
    public function _testSendFleetTo( $uname, $pos, $res = 0 )
    {
        $fleet = Classes::Fleet();
        $user = Classes::User( $uname );
        $mypos = $user->getPosString();
        unset( $user );       

        /*
		 * flotte als transport mit 10 kleinen transportern zum ziel $pos versenden
		 */
        $type = 6; // stationieren
        $fleetContent = array( "S1" => 100 ); // 100 groï¿½e? transporter
        $fleet->create(); // no return 
        $this->test_Fleets[$uname][] = $fleet->getName();
        $this->assertTrue( $fleet->addTarget( $pos, $type, false ) );
        $this->assertEquals( $uname, $fleet->addUser( $uname, $mypos, 1 /* default */ ) );
        
        $doTransportWithRes = false;
        
        if ( $res != 0 ) 
        {
            for( $i = 0; $i <= 4; $i++ )
            {
                if ( isset( $res[$i] ) )
                {
                    $doTransportWithRes = true;
                }
                
            }            
        }      
        
        $this->assertTrue( $fleet->addFleet( key( $fleetContent ), current( $fleetContent ), $uname ) );

        // Fleet::addTransport() has do be done after calling Fleet::addFleet()
        if ( $doTransportWithRes )
        {
            for( $i = 0; $i <= 4; $i++ )
            {
                if ( !isset( $res[$i] ) )
                {
                    $res[$i] = 0;
                }                
            }
  
            $this->assertTrue( $fleet->addTransport( $uname, $res ) );                        
        }
        else
        {
            $this->assertTrue( $fleet->addTransport( $uname, array( 0, 0, 0, 0, 0 ) ) );
        }
                
        $this->assertTrue( $fleet->addHoldTime( 0 ) );
        $this->assertGreaterThan( 0, $fleet->getStatus() );
        $this->assertGreaterThan( 0, $fleet->calcNeededTritium( $uname ) );
        $fleet->start(); // no return
        $this->assertEquals( $pos, $fleet->getCurrentTarget() );
        
        $user = Classes::User( $uname );
        $fleetid = $fleet->getName();
        $this->assertTrue( $user->addFleet( $fleetid ) );
        unset( $user );
        unset( $fleet );
        
        $this->_testIsFleetExistingSpecific( $uname, $fleetid, $pos, $mypos, $fleetContent, $type, false );
    }
    

    /**
     * returns the MAX_PLANETS global setting and tests it for plausibility
     * @return unknown_type
     */
    public function _testAndGetMaxPlanets( )
    {
        $maxplanets = global_setting( "MAX_PLANETS" );
        
        $this->assertGreaterThan( 1, $maxplanets );
        
        return $maxplanets;
    }

    /**
     * gets rid of old data stored in database for a fresh test setup
     * @param string $dir
     * @return -
     */
    protected function _tearDown_DeleteDir( $dir )
    {
        $exclude = array( '.', '..' );
        $files = array_diff( scandir( $dir ), $exclude );
        
        foreach ( $files as $value )
        {
            $fname = $dir . "/" . $value;
            
            if ( ! is_dir( $fname ) && is_file( $fname ) && is_writable( $fname ) )
            {
                unlink( $fname );
            }
        }
    }

    /**
     * subfunc for testing the whole setup
     * @param TestUser $userData
     * @return -
     */
    public function _testSetup( &$userData )
    {
        if ( $userData->shouldCreate() && $userData->shouldCreateOnSetup() )
        {
            $this->assertTrue( User::userExists( $userData->getName() ) );
        }
        else
        {
            $this->assertFalse( User::userExists( $userData->getName() ), "user " . $userData->getName() . " exists but shouldnt" );
        }
        
        if ( ! $userData->isCreated() )
        {
            $this->assertFalse( User::userExists( $userData->getName() ) );
            return;
        }
        
        $this->_testScoresOfUser( $userData );
        $userObj = Classes::User( $userData->getName() );
        
        foreach ( $userData->getPlanets() as $planetData )
        {
            $i = $planetData->getIndex();
            
            if ( $planetData->isCreated() )
            {
                $this->assertTrue( $userObj->setActivePlanet( $i ) );
                $this->assertTrue( $userObj->planetExists( $i ) );
                $this->assertEquals( $planetData->getName(), $userObj->planetName(), "for index: " . $i . "\n" );
                $this->_testPlanetItems( $userObj, $planetData );
                $this->_testRes( $userObj, $planetData );
            }
            else
            {
                $this->assertFalse( $userObj->setActivePlanet( $i ) );
                $this->assertFalse( $userObj->planetExists( $i ) );
                //$this->assertFalse( $userObj->planetName() ); // doesnt work, cause we couldnt change to that planet with setActivePlanet()
            }
        }
        
        //$userObj->doRecalcHighscores( true, true, true, true, true );
    }

    /**
     * 
     * @param $userData
     * @return unknown_type
     */
    private function _testScoresOfUser( &$userData )
    {
        $testScores = &$userData->getScores();
        $userObj = Classes::User( $userData->getName() );
        $this->assertType( 'object', $userObj );
        
        $userObj->doRecalcHighscores( true, true, true, true, true );
        $userObj->clearCache();
        
        $testPlanets = $userData->getPlanets();
        
        foreach ( $testPlanets as $testPlanet )
        {
            $ret = $userObj->setActivePlanet( $testPlanet->getIndex() );
            
            if ( $ret === false )
            {
                $this->assertFalse( $testPlanet->isCreated() );
                continue;
            }
            else
                $this->assertTrue( $testPlanet->isCreated() );
            
            $testItems = $testPlanet->getItems();
            
            // check all buildings
            $items = $userObj->getItemsList( 'gebaeude' );
            
            foreach ( $items as $item )
            {
                // test if item exists in our test data
                $this->assertTrue( isset( $testItems[$item] ), "item: " . $item . " on planet: " . $testPlanet->getIndex() . " of user: " . $userData->getName() . " doesnt exists in testData" );
                
                $this->assertEquals( $testPlanet->getIndex(), $userObj->getActivePlanet() );
                
                $testItem = $testItems[$item];
                $item_info = $userObj->getItemInfo( $item, 'gebaeude', true, true );
                
                // test if score of the item is the same as in our test data
                $this->assertEquals( $item_info['scores'], $testItem->getScore(), "failed comparing score for " . $item . " user: " . $userObj->getName() . " planet: " . $testPlanet->getIndex() . " level of testItem: " . $testItem->getLevel() . " level of realItem: " . $item_info['level'] );
            }
            
            // check all robots
            $items = $userObj->getItemsList( 'roboter' );
            
            foreach ( $items as $item )
            {
                // test if item exists in our test data
                $this->assertTrue( isset( $testItems[$item] ), "item: " . $item . " on planet: " . $testPlanet->getIndex() . " of user: " . $userData->getName() . " doesnt exists in testData" );
                
                $testItem = $testItems[$item];
                $item_info = $userObj->getItemInfo( $item, 'roboter', true, true );
                
                // test if score of the item is the same as in our test data
                $this->assertEquals( $item_info['scores'], $testItem->getScore(), "failed comparing score for " . $item . " user: " . $userObj->getName() . " planet: " . $testPlanet->getIndex() );
            }
            
            // check all ships
            $items = $userObj->getItemsList( 'schiffe' );
            
            foreach ( $items as $item )
            {
                // test if item exists in our test data
                $this->assertTrue( isset( $testItems[$item] ), "item: " . $item . " on planet: " . $testPlanet->getIndex() . " of user: " . $userData->getName() . " doesnt exists in testData" );
                
                $testItem = $testItems[$item];
                $item_info = $userObj->getItemInfo( $item, 'schiffe', true, true );
                
                // test if score of the item is the same as in our test data
                $this->assertEquals( $item_info['scores'], $testItem->getScore(), "failed comparing score for " . $item . " user: " . $userObj->getName() . " planet: " . $testPlanet->getIndex() );
            }
            
            // check all defense
            $items = $userObj->getItemsList( 'verteidigung' );
            
            foreach ( $items as $item )
            {
                // test if item exists in our test data
                $this->assertTrue( isset( $testItems[$item] ), "item: " . $item . " on planet: " . $testPlanet->getIndex() . " of user: " . $userData->getName() . " doesnt exists in testData" );
                
                $testItem = $testItems[$item];
                $item_info = $userObj->getItemInfo( $item, 'verteidigung', true, true );
                
                // test if score of the item is the same as in our test data
                $this->assertEquals( $item_info['scores'], $testItem->getScore(), "failed comparing score for " . $item . " user: " . $userObj->getName() . " planet: " . $testPlanet->getIndex() );
            }
        }
        
        $k = 0;
        
        // till 11 or more for ressource scores - but should be 11
        for ( $i = 0; $userObj->getScores( $i ) != 0 || $i <= 11; $i ++ )
        {
            if ( $i == 1 )
            {
                continue;
            }
            
            $sum = 0;
            
            //$userObj->doRecalcHighscores( true, true, true, true, true, true );
            if ( $i >= 0 && $i <= 4 )
                $sum = $userData->getSumScores( $i );
            else 
                if ( $i >= 4 && $i <= 11 )
                {
                    $testScores = $userData->getScores();
                    $sum = $testScores->getScoreID( $i );
                }
            
            $this->assertGreaterThanOrEqual( 0, $sum );
            $diff = $sum - $userObj->getScores( $i );
            $this->assertEquals( $sum, $userObj->getScores( $i ), "_testScoresOfUser() failed, for key: " . $i . " diff: " . $diff . "\n" );
            
            $k ++;
        }
        
        // we expect to test 11 score values
        $this->assertEquals( 11, $k );
        
        $sum = 0;
        $testScoresArray = $testScores->getAllScoresAsArray();
        
        for ( $i = 0; $i <= 6; $i ++ )
        {
            $sum += $testScoresArray[$i];
            //print "testScoresArray() adding " . $testScoresArray[$i] . " for id: " . $i . " user: " . $userData->getName() . "\n";
        }
        
        $userObj->doRecalcHighscores( true, true, true, true, true );
        $userObj->clearCache();
        
        $this->assertGreaterThan( 0, $sum, "testscores of user " . $userData->getName() . " are empty?!\n" );       

        // scores only exists up to 11, above shouldnt exists
        $this->assertEquals( 0, $userObj->getScores( 12 ) );
        
        // erase cache and retest
        $userObj->doRecalcHighscores( true, true, true, true, true );
    }

    /*
	 * test if a given fleet is existant, it is expected to do, otherwise this test will fail
	 */
    public function _testIsFleetExistingSpecific( $from_user, $fleetid, $to_pos, $from_pos, $ships, $type, $flyingback )
    {
        $user = Classes::User( $from_user );
        $fleets = $user->getFleetsList();
        
        $this->assertGreaterThan( 0, count( $fleets ), "no fleets found" );

        // search our fleet by $fleetid
        $fleet = false;

        foreach ( $fleets as $ffleet )
        {
            // found!, save.
            // if fleetid is 0 take the very first fleet
            if ( $ffleet == $fleetid || $fleetid == 0 )
            {
                $fleet = $ffleet;
            }
        }
        
        // not found
        if ( $fleet == false )
        {
            throw new Exception( "_testIsFleetExistingSpecific() failed, no fleet found" );
        }
        
        $fleet_obj = Classes::Fleet( $fleet );
        $that = Classes::Fleet( $fleet );
        $blub = $user->getFleetsWithPlanet();
        
        unset( $user );
        
        $targets = $that->getTargetsList();
        
        $this->assertEquals( array( $to_pos ), $targets );
        $this->assertEquals( $ships, $fleet_obj->getFleetList( $from_user ) );
        
        if ( ! $flyingback )
        {
            $this->assertFalse( $fleet_obj->isFlyingBack() );
        }
        else
        {
            $this->assertTrue( $fleet_obj->isFlyingBack() );
        }
    }

    /**
     * compares all planet items stored in testdata to the actual existing ones on the users planet
     * @param User $user
     * @param TestPlanet $planetData
     * @return -
     */
    public function _testPlanetItems( &$user, &$planetData )
    {
        $this->assertGreaterThanOrEqual( 0, $planetData->getIndex() );
        
        $this->assertTrue( $user->setActivePlanet( $planetData->getIndex() ) );
        
        foreach ( $planetData->getItems() as $itemData )
        {
            $id = $itemData->getId();
            $level = $itemData->getLevel();
            
            $lvl = $user->getItemLevel( $id, false, false );
            if ( $level != $lvl /*&& $planetData->getIndex() == 4*/)
				echo "MISMATCH -- expected: " . $level . " got: " . $lvl . " for item: " . $id . " on planet " . $planetData->getName() . " (" . $user->planetName() . ")\n";
            $this->assertEquals( $level, $lvl, '_testPlanetItems() expected level didnt match for given item ' . $id . ' wanted: ' . $level . ' got: ' . $lvl );
            //echo "testing item: ".$id." for level: ".$level." which is: ".$lvl."\n";
        }
        
        $this->_testActiveResearch( $user, $planetData );
    }

    /**
     * compares main ressources from testData to the existing ones on the planet
     * @param User $user
     * @param TestPlanet $planetData
     * @return -
     */
    public function _testRes( &$user, &$planetData )
    {
        $this->assertTrue( $user->setActivePlanet( $planetData->getIndex() ) );
        
        $testRes = $planetData->getRes();
        $planetRes = $user->getRess();
        
        foreach ( $testRes as $key => $value )
        {
            // TODO, check and calc tritium
            if ( $key == 4 )
            {
                continue;
            }
            
            // TODO, needs more accurate check
            $this->assertGreaterThanOrEqual( $testRes[$key], $planetRes[$key], $key . " didnt match of planet " . $planetData->getIndex() . " - " . $planetData->getName() . " of user " . $user->getName() . "\n" );
        }
    
    }

    protected function _buildTestHighScore()
    {
        $userObj = NULL;
        
        foreach ( $this->testData->getTestUsers() as $testUser )
        {
            if ( ! $testUser->isCreated() )
            {
                $userObj = Classes::User( $testUser->getName() );
                continue;
            }
            else
            {
                $userObj = Classes::User( $testUser->getName() );
            }

            $userObj->doRecalcHighscores( true, true, true, true, true );
            $testHighScore = &$this->testData->getTestHighscore();
            $testHighScore->addUser( $userObj->getName(), $userObj->getScores() );
        }        
        
        $testHighScore->buildRankList();
    }      
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp( )
    {
        // must be the FIRST line   	
        // define_globals( Uni ); to set globals like where db files are located etc
        define_globals( 'TestUni1' );
        
        $this->cleanUp();
        
        $this->testData = new TestData( );
        $this->tester = new Tester( $this->testData );
        $this->tester->setUp();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown( )
    {
        
    }

    protected function cleanUp( )
    { 
        Classes::resetInstances();
        
        $this->_tearDown_DeleteDir( global_setting( "DB_PLAYERS" ) );
        $this->_tearDown_DeleteDir( global_setting( "DB_FLEETS" ) );
        $this->_tearDown_DeleteDir( global_setting( "DB_MESSAGES" ) );
    }
    
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main( )
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';        
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////// TESTS START HERE //////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    /**
     * test our test setup
     */
    public function testSetup( )
    {
        foreach ( $this->testData->getTestUsers() as $userData )
        {
            $this->_testSetup( $userData );
        }               
    }
 
    public function testUserExists( )
    {
        foreach ( $this->testData->getTestUsers() as $user )
        {
            if ( $user->isCreated() )
            {
                $this->assertTrue( User::userExists( $user->getName() ), "user which was created doesnt exist" );
            }
            else 
                if ( ! $user->isCreated() )
                {
                    $this->assertFalse( User::userExists( $user->getName() ), "user which wasnt created does exist" );
                }
        }
        
        $this->assertFalse( User::userExists( NULL ), "func returned true but no name was given as parameter" );
    }

    public function testPlanetExists( )
    {
        $users = $this->testData->getTestUsers();
        
        foreach ( $users as $user )
        {
            if ( ! $user->isCreated() )
            {
                continue;
            }
            else
            {
                $userObj = Classes::User( $user->getName() );
                $planets = $user->getPlanets();
                
                foreach ( $planets as $planet )
                {
                    if ( $planet->isCreated() )
                    {
                        $this->assertTrue( $userObj->planetExists( $planet->getIndex() ), "planet setup but doesnt exist" );
                    }
                    else
                    {
                        $this->assertFalse( $userObj->planetExists( $planet->getIndex() ), "planet shouldnt exist" );
                    }
                }
            }
        }
        
        // call it with an initialised user but which doesnt exists
        $fuser = Classes::User( "fakeuser1337" );
        
        for ( $i = 0; $i <= $this->_testAndGetMaxPlanets(); $i ++ )
        {
            $this->assertFalse( $fuser->planetExists( $i ), "planet shouldnt exists on non-existing user" );
        }
    }

    public function testSetActivePlanet( )
    {
        $users = $this->testData->getTestUsers();
        
        foreach ( $users as $user )
        {
            if ( ! $user->isCreated() )
            {
                continue;
            }
            else
            {
                $userObj = Classes::User( $user->getName() );
                $planets = $user->getPlanets();
                
                foreach ( $planets as $planet )
                {
                    if ( $planet->isCreated() )
                    {
                        $this->assertTrue( $userObj->setActivePlanet( $planet->getIndex() ), "planet setup but doesnt exist" );
                    }
                    else
                    {
                        $this->assertFalse( $userObj->setActivePlanet( $planet->getIndex() ), "planet shouldnt exist" );
                    }
                }
            }
        }
        
        // call it with an initialised user but which doesnt exists
        $fuser = Classes::User( "fakeuser1337" );
        
        for ( $i = 0; $i <= $this->_testAndGetMaxPlanets(); $i ++ )
        {
            $this->assertFalse( $fuser->setActivePlanet( $i ), "planet shouldnt exists on non-existing user" );
        }
    }

    public function testGetPlanetByPos( )
    {
        $users = $this->testData->getTestUsers();
        
        // get our very fist user for testing
        $uname = $users[0]->getName();
        $user = Classes::User( $uname );
        
        $fuser = Classes::User( "fakeuser1339" );
        
        $this->assertFalse( $fuser->getPlanetByPos( false ) );
        
        for ( $i = 0; $i <= TEST_MAX_GALAXIES; $i ++ )
        {
            for ( $k = 0; $k <= TEST_MAX_SYSTEMSINGALAXY; $k ++ )
            {
                for ( $m = 0; $m <= TEST_MAX_PLANETSINSYSTEM; $m ++ )
                {
                    if ( rand( 0, 10 ) != 5 )
                    {
                        continue;
                    }
                    
                    $pos = $i . ":" . $k . ":" . $m;
                    $bMyPlanet = false;
                    
                    foreach ( $users[0]->getPlanets() as $planet )
                    {
                        if ( $planet->isCreated() && $pos == $planet->getPosString() )
                        {
                            $bMyPlanet = true;
                            $this->assertEquals( $planet->getIndex(), $user->getPlanetByPos( $pos ) );
                            //echo "found mah planet @ ".$pos."\n"; 
                        }
                    }
                    
                    if ( ! $bMyPlanet )
                        $this->assertFalse( $user->getPlanetByPos( $pos ) );
                }
            }
        }
    }

    /*
	 * checking if the returned planetlist is the same as our one of the created planets
	 */
    public function testGetPlanetsList( )
    {
        $testUsers = $this->testData->getTestUsers();
        $testusr = $testUsers[0];
        
        // get our very fist user for testing
        $user = Classes::User( $testusr->getName() );
        
        $fuser = Classes::User( "fakeuser1340" );
        
        $this->assertFalse( $fuser->getPlanetsList() );
        
        $planets = $user->getPlanetsList();
        
        for ( $i = 0; isset( $planets[$i] ) || $testusr->hasCreatedPlanetAtIndex( $i ); $i ++ )
        {
            $this->assertTrue( isset( $planets[$i] ) );
            $this->assertTrue( $testusr->hasCreatedPlanetAtIndex( $i ) );
        }
    }

    public function testRegisterPlanet( )
    {
        $fuser = Classes::User( "fakeuser1341" );
        $freeKoords = getFreeKoords();
        $maxplanets = $this->_testAndGetMaxPlanets();
        $testUsers = $this->testData->getTestUsers();
        $testUser = $testUsers[0];
        $user = Classes::User( $testUser->getName() );
        $loops = 0;
        
        while ( $testUser->getCreatedPlanetCount() <= $maxplanets + 1 )
        {
            $loops ++;
            $this->assertLessThan( 100, $loops );
            
            if ( $freeKoords == false )
            {
                throw new Exception( "testRegisterPlanet() failed, no free coords available" );
            }
            
            $testCount = $testUser->getCreatedPlanetCount();
            
            if ( $testCount >= $maxplanets )
            {
                $index = $user->registerPlanet( $freeKoords );
                $this->assertFalse( $index );
                break;
            }
            else
            {
                $index = $user->registerPlanet( $freeKoords );
                $this->assertGreaterThanOrEqual( 0, $index, 'registerPlanet() failed, current planetcount is :' . $testUser->getPlanetCount() );
                $testUser->addNewPlanetCreated( $index, $freeKoords );
            }
            
            $freeKoords = getFreeKoords();
        }
        
        // non-existant galaxy - 9
        $this->assertFalse( $user->registerPlanet( "9:" . $freeKoords[1] . ":" . $freeKoords[2] ) );
        
        // malformed koordinates
        $this->assertFalse( $fuser->registerPlanet( "1:3:3:7" ) );
        
        $testPlanets = $testUser->getPlanets();
        $testPlanet = NULL;
        
        // try to register an already existing planet
        foreach ( $testPlanets as $planet )
        {
            if ( $planet->isCreated() )
            {
                $testPlanet = &$planet;
            }
        }
        
        $this->assertNotNull( $testPlanet );
        $this->assertFalse( $user->registerPlanet( $testPlanet->getGalaxy() . ":" . $testPlanet->getSystem() . ":" . $testPlanet->getSysIndex() ) );
        
        // 1st registered planet always has 375 fields
        $freeKoords = getFreeKoords();
        $freeKoordsArray = explode( ":", $freeKoords );
        $newTestUser = $this->testData->getUnusedUser();
        $usaName = $newTestUser->getName();
        $newUser = Classes::User( $usaName );
        $newUser->create();
        $newTestUser->setIsCreated( true );
        $index = $newUser->registerPlanet( $freeKoords );
        $testPlanet = $newTestUser->addNewPlanetCreated( $index, $freeKoords );
        $this->assertGreaterThanOrEqual( 0, $index );
        $newUser->setActivePlanet( $index );
        
        $galaxy = Classes::Galaxy( $freeKoords[0] );
        $this->assertGreaterThan( 0, $galaxy->getStatus() );
        $this->assertEquals( 375, $newUser->getBasicFields() );
        // we cant compare this, since galaxys size doesnt get overwritten when creating a 1st planet	
        //$this->assertEquals(375, $galaxy->getPlanetSize($freeKoordsArray[1], $freeKoordsArray[2]));
        

        // default planet name is "Kolonie"
        $this->assertEquals( "Kolonie", $galaxy->getPlanetName( $freeKoordsArray[1], $freeKoordsArray[2] ) );
        
        // check if research for making planets bigger is applied as it should
        $expFields = $newUser->getBasicFields();
        $newUser->changeItemLevel( "F9", 10, "forschung" );
        $expFields *= $newUser->getItemLevel( 'F9', 'forschung' ) + 1;
        $this->assertEquals( $expFields, $newUser->getFields() );
        $this->assertNotEquals( $expFields, $newUser->getBasicFields() );
        
        // 2nd planet, check if its size is same as galaxy says
        $freeKoords = getFreeKoords();
        $freeKoordsArray = explode( ":", $freeKoords );
        $index = $newUser->registerPlanet( $freeKoords );
        $testPlanet = $newTestUser->addNewPlanetCreated( $index, $freeKoords );
        $this->assertEquals( 1, $index );
        $newUser->setActivePlanet( $index );
        $galaxy = Classes::Galaxy( $freeKoords[0] );
        $this->assertGreaterThan( 0, $galaxy->getStatus() );
        $this->assertGreaterThan( 0, $newUser->getBasicFields() );
        $this->assertGreaterThan( 0, $galaxy->getPlanetSize( $freeKoordsArray[1], $freeKoordsArray[2] ) );
    }

    /**
     * - not existing users cant call that \o/
     * - last planet cant be moved down \o/
     * - all other planets should be able to \o/
     * - check for reassigned researches _o_
     * - check for all items on the planets \o/
     * - check the planetList if they matches the new one \o/
     * - w/o parameter active planet is moved down \o/
     * @return none
     */
    public function testMovePlanetDown( )
    {
        $fuser = Classes::User( "fakeuser1341" );
        $this->assertFalse( $fuser->movePlanetDown( 0 ) );
        $testUsers = $this->testData->getTestUsers();
        
        $testedUsers = 0;
        
        foreach ( $testUsers as &$testUser )
        {
            if ( ! $testUser->isCreated() )
                continue;
            
            $tUser = Classes::User( $testUser->getName() );
            
            $planets = $tUser->getPlanetsList();
            
            $lastPlanetIndex = count( $planets ) - 1;
            
            if ( $lastPlanetIndex == 0 )
            {
                continue;
            }
            
            $this->assertFalse( $tUser->movePlanetDown( $lastPlanetIndex ) );
            
            $planetIndex = array_rand( $planets, 1 );
            
            if ( $planetIndex == $lastPlanetIndex )
            {
                $planetIndex = $lastPlanetIndex - 1;
            }
            $this->testSetup();
            
            $this->assertTrue( $tUser->movePlanetDown( $planetIndex ) );
            
            $testUser->cyclePlanets( $planetIndex, $planetIndex + 1 );
            $this->testSetup();
            
            $this->assertTrue( $tUser->setActivePlanet( $planetIndex ) );
            $this->assertTrue( $tUser->movePlanetdown() );
            $testUser->cyclePlanets( $planetIndex, $planetIndex + 1 );
            $this->testSetup();
            
            $testedUsers ++;
        }
        
        $this->assertGreaterThan( 0, $testedUsers );
    }

    /**
     * - not existing users cant call that \o/
     * - first planet cant be moved up \o/
     * - all other planets should be able to \o/
     * - check for reassigned researches \o_
     * - check for all items on the planets \o/
     * - check the planetList if they matches the new one \o/
     * - w/o parameter active planet is moved up \o/
     * @return none
     */
    public function testMovePlanetUp( )
    {
        $fuser = Classes::User( "fakeuser1342" );
        $this->assertFalse( $fuser->movePlanetUp( 0 ) );
        $testUsers = $this->testData->getTestUsers();
        
        $testedUsers = 0;
        
        foreach ( $testUsers as &$testUser )
        {
            if ( ! $testUser->isCreated() )
                continue;
            
            $tUser = Classes::User( $testUser->getName() );
            
            $planets = $tUser->getPlanetsList();
            
            // this user has no planets, skip
            if ( $planets === false || count( $planets ) == 0 )
            {
                continue;
            }
            
            $this->assertType( 'array', $planets );
            
            // 1st planet cant be moved up
            $this->assertFalse( $tUser->movePlanetUp( 0 ) );
            
            $planetIndex = array_rand( $planets, 1 );
            
            if ( $planetIndex == 0 )
            {
                $planetIndex ++;
            }
            $this->testSetup();
            $this->assertTrue( $tUser->movePlanetUp( $planetIndex ) );
            
            $testUser->cyclePlanets( $planetIndex, $planetIndex - 1 );
            $this->testSetup();
            
            $this->assertTrue( $tUser->setActivePlanet( $planetIndex ) );
            $this->assertTrue( $tUser->movePlanetUp() );
            $testUser->cyclePlanets( $planetIndex, $planetIndex - 1 );
            $this->testSetup();
            
            $testedUsers ++;
        }
        
        $this->assertGreaterThan( 0, $testedUsers );
    }

    /**
     * testing for adding scores via User::addScores()
     * @return none
     */
    public function testAddScores( )
    {
        $userObj = NULL;
        
        foreach ( $this->testData->getTestUsers() as $testUser )
        {
            if ( ! $testUser->isCreated() )
            {
                $userObj = Classes::User( $testUser->getName() );
                $this->assertFalse( $userObj->addScores( 0, 0 ) );
                continue;
            }
            else
            {
                $userObj = Classes::User( $testUser->getName() );
            }
            
            $testScore = &$testUser->getScores();
            
            for ( $i = 0; $i < 20; $i ++ )
            {
                $rScore = rand( 0, 1000 );
                
                if ( $i >= 5 && $i <= 11 )
                {
                    $testScore->addScoreID( $i, $rScore );
                    $this->assertTrue( $userObj->addScores( $i, $rScore ) );
                }
                else 
                    if ( $i >= 0 && $i <= 4 )
                    {
                        // adding score for 0-4 should get erased on the recalculation
                        $this->assertTrue( $userObj->addScores( $i, $rScore ) );
                    }
                    else
                    {
                        $this->assertFalse( $userObj->addScores( $i, $rScore ) );
                    }
            
            }
            
            // do a test of all userScores, testing via User::getScore()
            $this->_testScoresOfUser( $testUser );
        }
    }
    
    /**
     * testing for retrieving spent res via User::getSpentRess()
     * @return none
     */
    public function testGetSpentRess( )
    {
        $userObj = NULL;
        $testCount = 0;
        
        foreach ( $this->testData->getTestUsers() as $testUser )
        {
            if ( ! $testUser->isCreated() )
            {
                $userObj = Classes::User( $testUser->getName() );
                $this->assertFalse( $userObj->getSpentRess( 0 ) );
                continue;
            }
            else
            {
                $userObj = Classes::User( $testUser->getName() );
            }
            
            $testScore = $testUser->getScores();
            $sum = 0;
            
            for ( $i = 0; $i <= 4; $i ++ )
            {
                $sum += $testScore->getScoreID( $i + 7 );                
                $this->assertEquals( $userObj->getSpentRess( $i ), $testScore->getScoreID( $i + 7 ) );                          
            }
            
            $this->assertGreaterThan( 0, $sum );
            $this->assertEquals( $userObj->getSpentRess(), $sum );
                        
            $testCount++;
        }
        
        $this->assertGreaterThan( 0, $testCount );
    }

    /**
     * testing for retrieving users rank in the highscore via User::getRank()
     * - rank is above 0 \o/
     * - rank is correct \o/
     * @return none
     */
    public function testGetRank( )
    {
        $userObj = NULL;
        $this->_buildTestHighScore();
        $testHighScore = $this->testData->getTestHighscore();
        
        foreach ( $this->testData->getTestUsers() as $testUser )
        {
            if ( ! $testUser->isCreated() )
            {
                $userObj = Classes::User( $testUser->getName() );
                continue;
            }
            else
            {
                $userObj = Classes::User( $testUser->getName() );
            }
            
            $ranks = $testHighScore->getRankList(); 
                    
            // check if our user if on the position he says he is
            $userObj->doRecalcHighscores( true, true, true, true, true );
            $this->assertTrue( isset( $ranks[$userObj->getRank()] ), "key: ".$userObj->getRank()." not set user: ".$userObj->getName() );
            $this->assertEquals( $ranks[$userObj->getRank()], $userObj->getName(), "user: ".$userObj->getName()." said he got rank: ".$userObj->getRank()." this rank is used by ".$ranks[$userObj->getRank()]." (testHighscore)\n" );                                   
            $this->assertGreaterThan( 0, $userObj->getRank() );
        }
    }    
    
    /**
	 * most of the User::getScores() is covered by the setupTest, however we need to fill some gaps in coverage
     */
    public function testGetScores( )
    {       
        foreach ( $this->testData->getTestUsers() as $testUser )
        {
            if ( ! $testUser->isCreated() )
            {
                $userObj = Classes::User( $testUser->getName() );
                $this->assertFalse( $userObj->getScores() );
            } 
        }
    }    
    
    /**
     * subtests:
     * - setting illegal planet names \o/
     * - setting legal planet name \o/
     * - getting planet names and compare them to testdata \o/
     * - getting planet names and compare them to previous set \o/ 
     * - test galaxy kram \o/
     */
    public function testPlanetName( )
    {   
        $tested = 0;
            
        foreach ( $this->testData->getTestUsers() as $testUser )
        {
            if ( ! $testUser->isCreated() )
            {
                $userObj = Classes::User( $testUser->getName() );
                $this->assertFalse( $userObj->planetName() );
                
                continue;
            } 
            else
            {
                $userObj = Classes::User( $testUser->getName() );
                $this->assertGreaterThan( 0, $userObj->getStatus() );
                
                if ( $testUser->getPlanetCount() <= 0 )
                {
                    return;
                }
            }
                      
            $planets = $userObj->getPlanetsList();
            
            $this->assertType( 'array', $planets, "user: ".$testUser->getName() );
            
            foreach ( $planets as $planet )
            {
                $userObj->setActivePlanet( $planet );            
            
                // comparing planet names with our internal saved ones
                $testPlanets = $testUser->getPlanets();
                $curTestPlanet = false;
                                
                foreach ( $testPlanets as $testPlanet )
                {
                    if ( $testPlanet->getIndex() == $planet )
                    {
                        $curTestPlanet = $testPlanet;
                    }
                }
                
                $this->assertType('object', $curTestPlanet );
                $this->assertGreaterThan( 0, strlen( $userObj->planetName() ));                
                $this->assertEquals( $curTestPlanet->getName(), $userObj->planetName() );                
                
                // trying different names, allowed ones and disallowed
                $this->assertFalse( $userObj->planetName( 'invalid_name%&%??!.__aa' ) );
                $this->assertFalse( $userObj->planetName( '\\meh' ) );
                $this->assertFalse( $userObj->planetName( '!!' ) );
                $this->assertTrue( $userObj->planetName( 'holy shit' ) );
                $this->assertTrue( $userObj->planetName( 'IMaCOOLname' ) );
                    
                $pos = $userObj->getPos(); 
                $galaxy = Classes::Galaxy( $pos[0] );
                $this->assertEquals( 'IMaCOOLname', $galaxy->getPlanetName( $pos[1], $pos[2] ) );
                
                $this->assertEquals( 'IMaCOOLname', $userObj->planetName() );          
            }  
            $tested++;          
        }
        
        $this->assertGreaterThan( 0, $tested );
    }    
     
    /*
     * checking if the returned planetlist is the same as our one of the created planets
     */
    public function testRemovePlanet( )
    {
        global $types_message_types;
                       
        // get our very fist user for the fleet start pos, using active planet
        $testusers = $this->testData->getTestUsers();
        $testUser = $testusers[0];
        $uname = $testUser->getName();
        $user = Classes::User( $uname );            
        
        $fuser = Classes::User( "fakeuser1341" );        
        $this->assertFalse( $fuser->removePlanet() );               
        
        // set active planet to 0 and send fleet to planet 1                
        $user->setActivePlanet( 0 );
        $planets = $testUser->getPlanets();
        $mypos = $user->getPosString();
        $pos = $planets[1]->getPosString();
        $toName = $planets[1]->getName();
        $fromName = $planets[0]->getName();
        $type = 6; // stationieren
        $delPlanetIndex = 1;
        $delPlanetPos = $mypos;
        
        $this->_testSendFleetTo( $uname, $pos );
        $this->assertTrue( $user->setActivePlanet( $delPlanetIndex ), "failed to set active planet to ".$delPlanetIndex." on user: ".$user->getName() );   
        $this->assertTrue( $user->removePlanet() ); // this FUCKS stuff up
                
        $testUser->destroyPlanet( $delPlanetIndex );
        unset( $user );
 
        // this fleet doesnt exists anymore cause it was callback'ed
        $fleetid = &$this->test_Fleets[$uname][0];
        $this->assertFalse( Fleet::fleetExists( $fleetid ) );
        
        // check if the fleet was sent back
        $this->_testIsFleetExistingSpecific( $uname, 0, $mypos, $pos, array( "S1" => 100 ), $type, true );
  
        // check if planet still exists
        $galaxy = Classes::Galaxy( 1 );
        $koords = explode( ":", $pos );
        $this->assertEquals( "", $galaxy->getPlanetOwner( $koords[1], $koords[2] ) );
        
        $user = Classes::User( $uname );
        $msgs = $user->getMessagesList( 3 );
        $msg = Classes::Message( $msgs[0] ); 

        $testMsg = new TestMessage( );
        $testMsg->setSubject( 'Flotte zur&uuml;ckgerufen' );
        $testMsg->setText( 'Ihre Flotte befand sich auf dem Weg zum Planeten &bdquo;' . $toName . '&ldquo; (' . $pos . ', Eigent&uuml;mer: ' . $user->getName() . '). Soeben wurde jener Planet verlassen, weshalb Ihre Flotte sich auf den R&uuml;ckweg zu Ihrem Planeten &bdquo;' . $fromName . '&ldquo; (' . $mypos . ') macht.' );
        $testMsg->setFrom( $uname );
        $testMsg->setType( $types_message_types[$type] );
        $testUser->addMessage( $testMsg );
        
        $this->_testMessages( $uname );
        
        // check if we still have a link to the old planet
        foreach ( $user->getPlanetsList() as $planet )
        {
            $this->assertTrue( $user->setActivePlanet( $planet ) );
            $this->assertNotSame( $delPlanetPos, $user->getPos() );
        }        
    //maybe TODO, highscores test, something happens with research
    } 
      
  
    
    /**
     * test for function User::addRess()
     * - test if added res gets added \o/
     * - test if cache is erased \o/
     * - test obj is marked as changed \o/
     */
    public function testAddRess()
    {
        // add those res
        $addRes = array( 55, 44, 2929, 23123, 666 );
                
        // fake, non-existing user
        $fuser = Classes::User( "fakeuser1341" );
        $this->assertFalse( $fuser->addRess( $addRes ));
        $checked = 0;
                
        for ( $testUser = &$this->testData->getNextTestUser(); $testUser != false; $testUser = &$this->testData->getNextTestUser() )
        {
            $userObj = Classes::User( $testUser->getName() );
            
            for ( $testPlanet = &$testUser->getNextTestPlanet(); $testPlanet != false; $testPlanet = &$testUser->getNextTestPlanet() )
            {
                $this->assertTrue( $userObj->setActivePlanet( $testPlanet->getIndex() ), "failed to set planet with index :".$testPlanet->getIndex() );
                
                // this shouldnt work when submitting a non array res value
                $this->assertFalse( $userObj->addRess( 1337 ) );
                
                $currentRes = $userObj->getRess( false );
                $this->assertTrue( $userObj->addRess( $addRes ) );                                                
                
                for( $i = 0; $i < 5; $i++ )
                {
                    $currentRes[$i] += $addRes[$i];
                }
                
                $this->assertEquals( $currentRes, $userObj->getRess( false ));  
                $this->assertTrue( $userObj->isChanged() );
                $this->assertFalse( $userObj->getCache( "getItemInfo", $testPlanet->getIndex() ) );              
            }
        }                              
    }    
    
    /**
     * test User::getRess()
     * - test res equal to start res w/o refresh \o/
     * - test res equal to calculated res w/ refresh \o/
     */
    public function testGetRess( )
    {                           
        // fake, non-existing user
        $fuser = Classes::User( "fakeuser1341" );
        $this->assertFalse( $fuser->getRess() );
        $checked = 0;
        
        foreach ( $this->testData->getTestUsers() as $testUser )
        {
            if ( !$testUser->isCreated() )
            {
                continue;
            }
            
            $uname = $testUser->getName();
            $userObj = Classes::User( $uname );
            $planets = $userObj->getPlanetsList();
            
            $this->assertType( 'array', $planets, "failed getting planetList of user: ".$userObj->getName() );
            
            foreach ( $planets as $planet )
            {
                $userObj->setActivePlanet( $planet );
            
                $testPlanets = $testUser->getPlanets();
                $curTestPlanet = false;
                                
                $this->assertType( 'array', $testPlanets );
                
                foreach ( $testPlanets as &$testPlanet )
                {
                    if ( $testPlanet->getIndex() == $planet )
                    {
                        $curTestPlanet = &$testPlanet;
                    }
                }
                
                // w/o refresh
                $oldRes = $userObj->getRess( false );
                $this->assertEquals( $curTestPlanet->getRes(), $oldRes );                

                // sleep a bit to get some new res in
                sleep(1);
                
                // w/ refresh
                $userObj->refreshRess();
                $prod = $userObj->getProduction();
                $curTestPlanet->setRes( $userObj->ress );
                $curTestPlanet->setEnergy( $prod[5] );
                
                $newRes = $userObj->getRess( true );
                $this->assertEquals( $curTestPlanet->getRes(), $newRes );                               
                
                // add check that our res count changed over time (production of mines)
                $this->assertNotEquals( $newRes, $oldRes );
                
                $checked++;
            }                
        }   

        $this->assertGreaterThan( 0, $checked );
    }      
    
    /**
     * tests User::changeUsedFields( $fields )
     * change fields and test if they got changed
     */
	public function testChangeUsedFields( )
	{
		$testUser = &$this->testData->getNextTestUser();	
        $userObj = Classes::User( $testUser->getName() );
            		
        $this->assertNotEquals(false, $userObj->getUsedFields());
    
		$curFields = $userObj->getUsedFields();
		$this->assertTrue($userObj->changeUsedFields(13));
		$curFields += 13;
		$this->assertEquals($curFields,$userObj->getUsedFields());
		$curFields += -12;
		$this->assertTrue($userObj->changeUsedFields(-12));
		$this->assertEquals($curFields,$userObj->getUsedFields());	
		$this->assertTrue($userObj->isChanged());	
	}
	
    /**
     * tests User::getRemainingFields( )
     * check return value
     */	
	public function testGetRemainingFields( )
	{
		$testUser = &$this->testData->getNextTestUser();	
        $userObj = Classes::User( $testUser->getName() );
        		
        $this->assertNotEquals(false, $userObj->getTotalFields());
        $this->assertNotEquals(false, $userObj->getUsedFields());
        
		$remainingFields = $userObj->getTotalFields() - $userObj->getUsedFields();		
		
		$this->assertEquals($remainingFields, $userObj->getRemainingFields());
	}
	
    /**
     * tests User::getBasicFields( )
     * check return value
     */	
	public function testGetBasicFields( )
	{
		$testUser = &$this->testData->getNextTestUser();	
        $userObj = Classes::User( $testUser->getName() );
        		
        $this->assertNotEquals(false, $userObj->getTotalFields());
        $this->assertNotEquals(false, $userObj->getItemLevel( 'F9', 'forschung' ));
                
		$totFields = $userObj->getTotalFields();
		$fieldResearch = $userObj->getItemLevel( 'F9', 'forschung' ) + 1;
		
		$this->assertEquals($totFields / $fieldResearch, $userObj->getBasicFields());
	}	
	
    /**
     * tests User::setFields( $fields )
     * check return value
     */	
	public function testSetFields( )
	{
		$testUser = &$this->testData->getNextTestUser();	
        $userObj = Classes::User( $testUser->getName() );
        
        $this->assertTrue($userObj->setFields( 133 ));
        $this->assertEquals(133,$userObj->getTotalFields());
        $this->assertTrue($userObj->isChanged());
	}		
	
	/**
	 * tests User::getFields()
	 * check if clone func does the same	 
	 */	 
	public function testGetFields( )
	{
		$testUser = &$this->testData->getNextTestUser();	
        $userObj = Classes::User( $testUser->getName() );
        		
		$totFields = $userObj->getTotalFields();
		$activeFields = $userObj->getFields();
		
        $this->assertNotEquals(false, $totFields);
        $this->assertGreaterThan(0, $totFields);
        $this->assertNotEquals(false, $activeFields);
        $this->assertGreaterThan(0, $activeFields);               
        			
		$this->assertEquals($activeFields, $totFields);
	}
	
	/**
	 * tests User::getPos()
	 * check if the returning array is correct based of the string pos 
	 */	 	
	public function testGetPos( )
	{	
		$testUser = &$this->testData->getNextTestUser();	
        $userObj = Classes::User( $testUser->getName() );
        
        // construct our own array for those coordinates
		$posString = $userObj->getPosString();
		$this->assertNotEquals(false, $posString);		
		$posArray = explode(":", $posString, 3);
		
		// check if our own pos match the returning one
		$arrPos = $userObj->getPos();
		$this->assertEquals($posArray, $arrPos);
	}
	
	/**
	 * tests User::getPlanetClass()
	 * get a test planet of the testuser we use and do a call to Galaxy::getPlanetClass() with the coords of that testplanet,
	 * those should match the one we get via User::getPlanetClass() (we've to set the activeplanet accordingly before!)	 
	 */	 	
	public function testGetPlanetClass( )
	{	
		$testUser = &$this->testData->getNextTestUser();	
        $userObj = Classes::User( $testUser->getName() );
        $testPlanet = &$testUser->getNextTestPlanet();
       	$testPlanetPos = $testPlanet->getPosString();
       	$tpPos = explode( ":", $testPlanetPos, 3 );
       	
       	// change current planet according to our testing planet
        $this->assertTrue($userObj->setActivePlanet( $testPlanet->getIndex() ));
        
        $userPlanetClass = $userObj->getPlanetClass();
        
        for($i = 0; $i < 3; $i++)
        {
        	$this->assertGreaterThan(0, $tpPos[$i]);
        }
        
        $testPlanetClass = getPlanetClass( $tpPos[0], $tpPos[1], $tpPos[2] );
        
       	__autoload( 'Galaxy' );
       	
       	$this->assertNotEquals(false, $userPlanetClass);
       	$this->assertEquals($testPlanetClass, $userPlanetClass);
	}	
	
	/**
	 * tests User::create()
	 * check the user got created in the database
	 */	 	
    public function testCreate( )
    {
        $usa = $this->testData->getUnusedUser();
        
        if ( $usa === false )
        {
            throw new Exception( "testCreate() failed, no remaining users for testing" );
        }
        
        // new user
        $newuser = Classes::User( $usa->getName() );
        
        // already exists
        $dupuser = Classes::User( $usa->getName() );
        
        $this->assertTrue( $newuser->create(), "couldnt create user" );
        
        $usa->setIsCreated( true );
        
        $this->assertFalse( $dupuser->create(), "could create user which already exist" );
        
        // check if user has been created in highscores
        $highscores = Classes::Highscores();
        $this->assertTrue($highscores->userExists($usa->getName()));
        
        $this->assertTrue( User::userExists($usa->getName()));
    }	
    
    /**
     * tests User::userExists()
     * test if this user exists in the database     
     */
    public function testUserExists2( )
    {
		$testUser = &$this->testData->getNextTestUser();	
        $userObj = Classes::User( $testUser->getName() );  

        // this one exists, there should be a file and User::testUserExists() should say the same
        $filename = global_setting( "DB_PLAYERS" ) . '/' . strtolower( urlencode( $testUser->getName() ) );
        $this->assertTrue(is_readable($filename));
        $this->assertTrue(User::userExists($testUser->getName()));
        
        $filename = global_setting( "DB_PLAYERS" ) . '/' . strtolower( urlencode( "THIS_USER_DOESNT_EXISTS" ) );
        $this->assertFalse(is_file($filename));
        $this->assertFalse(User::userExists("THIS_USER_DOESNT_EXISTS"));
        
    }

    /**
     * tests User::setStatus( $status )
     * test if this status is set
     */
    public function testSetStatus( )
    {
		$testUser = &$this->testData->getNextTestUser();	
        $userObj = Classes::User( $testUser->getName() );  

        $userObj->setStatus(3);
        $this->assertEquals(3, $userObj->getStatus());        
    }    
    
    ///// TEST DOESNT WORK!
    /**
     * subtests:
     * - setting illegal planet names \o/
     * - setting legal planet name \o/
     * - getting planet names and compare them to testdata \o/
     * - getting planet names and compare them to previous set \o/ 
     * - test galaxy kram \o/
     * - test getRessOnAllFleets return value by sending 2 fleets transporting ressources \o/
     */
    /*
    public function testGetRessOnAllFleets( )
    {   
        $tested = 0;
            
        foreach ( $this->testData->getTestUsers() as $testUser )
        {
            if ( ! $testUser->isCreated() )
            {
                $userObj = Classes::User( $testUser->getName() );
                $this->assertFalse( $userObj->planetName() );
                
                continue;
            } 
            else
            {
                $userObj = Classes::User( $testUser->getName() );
                $this->assertGreaterThan( 0, $userObj->getStatus() );
                
                if ( $testUser->getPlanetCount() <= 0 )
                {
                    return;
                }
            }
            
            $testRes1 = array( 1337, 4554, 3332, 5432, 1111 );       
            $testRes2 = array( 4554, 1337, 1111, 3332, 1337 );       
            
            $this->_testSendFleetTo( $testUser->getName(), "1:33:7", $testRes1 );   
            $this->_testSendFleetTo( $testUser->getName(), "1:100:2", $testRes2 );   
                  
            $this->assertEquals( array_sum( $testRes1 ) + array_sum( $testRes2 ), array_sum( $userObj->getRessOnAllFleets() ), "failed for user ".$testUser->getName() );

            $tested++;          
        }
        
        $this->assertGreaterThan( 0, $tested );
    }     
    */
    
    /**
     * tests User::subtractRess( $ress, $make_scores = true )
     * tests for:
     * - $ress is enforced to be an array
     * - points for spend res are add
     * - proper cache handling of the points cache
     */
    public function testSubtractRess( )
    {
		$testUser = &$this->testData->getNextTestUser();	
        $userObj = Classes::User( $testUser->getName() );  

        // test for submitting invalid parameters
        $this->assertFalse($userObj->subtractRess("pew"));
        $this->assertFalse($userObj->subtractRess(1337));
                    
        // some random values, res change, score change!
        $testArray = array("13", "", "-55", "99", "8958");
        $testResult = array4Sub($userObj->getRess(), $testArray);        
        $this->assertNotEquals($testResult, $userObj->getRess());
        $scoresBefore = array();
        $scoresNow = array();
        $scoresAfter = array();
        for($i = 0; $i < 5; $i++)
        {
            $this->GreaterThanOrEqual(0, $userObj->getSpentRess($i));
            $scoresBefore[$i] = $userObj->getSpentRess($i);
        }         
        $scoresAfter = $scoresBefore;      
        // FUNC TO TEST
        $this->assertTrue($userObj->subtractRess($testArray));       
        $this->assertTrue($userObj->isChanged());
        for($i = 0; $i < 5; $i++)
        {
            $scoresAfter[$i] += $testArray[$i];
        }       
        for($i = 0; $i < 5; $i++)
        {
            $this->GreaterThanOrEqual(0, $userObj->getSpentRess($i));
            $scoresNow[$i] = $userObj->getSpentRess($i);
        }             
        $this->assertNotEquals($scoresNow, $scoresBefore); 
        $this->assertEquals($testResult, $userObj->getRess());
        $this->assertEquals($scoresAfter, $scoresNow);  
        
        for($i = 0; $i < 5; $i++)
        {
            $this->GreaterThanOrEqual(0, $userObj->getSpentRess($i));
            $scoresBefore[$i] = $userObj->getSpentRess($i);
        }       
        $testResult = array4Sub($userObj->getRess(), $testArray);
        // FUNC TO TEST - no score change but res!
        $this->assertTrue($userObj->subtractRess($testArray, false));
        $this->assertTrue($userObj->isChanged());
        for($i = 0; $i < 5; $i++)
        {
            $this->GreaterThanOrEqual(0, $userObj->getSpentRess($i));
            $scoresNow[$i] = $userObj->getSpentRess($i);
        }             
        $this->assertEquals($testResult, $userObj->getRess());
        // scores should be equal as before, since we told them to not change it
        $this->assertEquals($scoresBefore, $scoresNow);  
    }      
    
    /**
     * tests User::checkRess( $ress )
     * tests for:
     * - $ress is enforced to be an array
     * - for every single res type, if its above we should get a false
     * - if all res are under the users amount we should get a true
     */
    public function testCheckRess( )
    {
		$testUser = &$this->testData->getNextTestUser();	
        $userObj = Classes::User( $testUser->getName() );  

        $this->assertFalse($userObj->checkRess("meh"));
        $this->assertFalse($userObj->checkRess(1337));
        
        $this->assertType("array", $userObj->getRess());
        $curRes = $userObj->getRess();
        
        $testRes = $curRes; // testing with current res amount
        $this->assertTrue($userObj->checkRess($testRes));
        
        // res type 0 is above 1 what we have, cant pay
        $testRes = $curRes;
        $testRes[0] += 1;
        $this->assertFalse($userObj->checkRess($testRes));        
        
        // TEST, for all res above 1, i cant pay
        for($i = 0; $i < 5; $i++)
        {
            $testRes = $curRes;
            $testRes[$i] += 1;
            $this->assertFalse($userObj->checkRess($testRes));
        }   

        // TEST, for all res under 1, i can pay cause i will have 1 of each res remaining!
        for($i = 0; $i < 5; $i++)
        {
            $testRes = $curRes;
            $testRes[$i] -= 1;
            $this->assertTrue($userObj->checkRess($testRes));
        }         
    }    
    
    /**
     * tests User::isOwnPlanet( $pos )
     * tests for:
     * - $pos can be an array or a string
     * - loop through all my planets, save their coords, and ask isOwnPlanet for all those coords - should be true!
     * - check some coords where i dont have any planet - should be false!
     */
    public function testIsOwnPlanet( )
    {        
		$testUser = &$this->testData->getNextTestUser();	
        $userObj = Classes::User( $testUser->getName() );
        $userObj->setActivePlanet(0);

        $myPlanetPos = array();
        $myPlanetStringPos = array();
        $planets = $userObj->getPlanetsList();
        $i = 0;
       
        // get all planet coords
        foreach($planets as $planet)
        {            
            $userObj->setActivePlanet($planet);
            $myPlanetPos[$i] = $userObj->getPos();
            $myPlanetStringPos[$i] = $userObj->getPosString();
            $i++;
        }               

        // add fake position
        $myPlanetFakePos = array(1, 33, 7);
        $myPlanetFakeStringPos = "1:33:7";
        
        // save current planet, this needs to be tested if its getting restored!
        $activePlanet = $userObj->getActivePlanet();
        
        // all of the previous gathered planets should be mine!
        $i = 0;
        while(isset($myPlanetPos[$i]))
        {
            $this->assertTrue($userObj->isOwnPlanet($myPlanetPos[$i]));
            $this->assertTrue($userObj->isOwnPlanet($myPlanetStringPos[$i]));
            $i++;
        }
        
        // test the fake position
        $this->assertFalse($userObj->isOwnPlanet($myPlanetFakePos));
        $this->assertFalse($userObj->isOwnPlanet($myPlanetFakeStringPos));
        
        // check if we are back to the planet we started with
        $this->assertEquals($activePlanet, $userObj->getActivePlanet()); 
    }    
    
    /**
     * tests User::getFleetsList()
     * tests for:
     * - deletion of non-existant fleets (rest of the func is just about returning private members vars)
     * - returning of type array, should be always empty
     * - create a real fleet and check for existance
     */
    public function testGetFleetsList( )
    {        
		$testUser = &$this->testData->getNextTestUser();	
        $userObj = Classes::User( $testUser->getName() );             
        
        // i should get an empty array back
        $this->assertType("array", $userObj->getFleetsList());
        $this->assertEquals(array(), $userObj->getFleetsList());
        
        // add fake fleet, will be deleted on calling getFleetsList()
        $this->assertTrue($userObj->addFleet("bullshit"));
        $this->assertEquals(array(), $userObj->getFleetsList());
        
        // lets create a real fleet, those should be also in our fleet list then!
        $fleetObj = Classes::Fleet("mew");
        $this->assertTrue($fleetObj->create());        
        $this->assertTrue($userObj->addFleet("mew"));
        $this->assertEquals(array(1 => "mew"), $userObj->getFleetsList());
    }    
    
    /**
     * tests User::addFleet()
     * tests for:
     * - add duplicated fleets
     * - check for changed state
     * - check for sort - skipped, sorting those fleets makes no sense ?
     */
    public function testAddFleet( )
    {        
		$testUser = &$this->testData->getNextTestUser();	
        $userObj = Classes::User( $testUser->getName() );             
        
        // lets create a fleets and add them
        $fleetObj = Classes::Fleet("mew");
        $this->assertTrue($fleetObj->create());        
        $this->assertTrue($userObj->addFleet("mew"));
        $this->assertEquals(2, $userObj->addFleet("mew")); // it returns 2 if the fleet already exists
        $this->assertEquals(array(0 => "mew"), $userObj->getFleetsList());
        $this->assertTrue($userObj->isChanged());
    }      
  
    
    /**
     * tests User::unsetFleet()
     * tests for:
     * - if fleet is removed from the list
     * - changed flag
     */
    public function testUnsetFleet( )
    {        
		$testUser = &$this->testData->getNextTestUser();	
        $userObj = Classes::User( $testUser->getName() );             
        
        $fleetObj = Classes::Fleet("mew");
        $this->assertTrue($fleetObj->create());        
        $this->assertTrue($userObj->addFleet("mew"));
        $this->assertEquals(array(0 => "mew"), $userObj->getFleetsList());
        
        // fake fleet removed, returns true though
        $userObj->setChanged(false); // reset changed status to false, previous Users::addFleet() call would otherwise break our test
        $this->assertFalse($userObj->isChanged());
        $this->assertTrue($userObj->unsetFleet("doesntexistslol"));
        $this->assertFalse($userObj->isChanged());
        
        // remove our previous added fleet        
        $this->assertEquals(0, $userObj->unsetFleet("mew")); // returns fleet id which got removed
        $this->assertTrue($userObj->isChanged());
        $this->assertEquals(array(), $userObj->getFleetsList());
    }     

    /**
     * tests User::unsetVerbFleet()
     * tests for:
     * - removing non-existant fleets should return true
     * - add fleet and return it afterwards, shouldnt exists anymore 
     */
    public function testUnsetVerbFleet( )
    {        
		$testUser = &$this->testData->getNextTestUser();	
        $userObj = Classes::User( $testUser->getName() );
        
        $this->assertTrue($userObj->changeFleetPasswd("fleet123", "pw123"));
        $this->assertEquals("pw123", $userObj->getFleetPasswd("fleet123"));
        
        // unsetting non-existant fleet is true
        $userObj->setChanged(false);
        $this->assertFalse($userObj->isChanged());
        $this->assertTrue($userObj->unsetVerbFleet("abcdef"));
        $this->assertTrue($userObj->isChanged());
        
        // fleet pw should still exists
        $userObj->setChanged(false);
        $this->assertEquals("pw123", $userObj->getFleetPasswd("fleet123"));
        
        // unsetting pw we created
        $this->assertFalse($userObj->isChanged());
        $this->assertTrue($userObj->unsetVerbFleet("fleet123"));
        $this->assertTrue($userObj->isChanged());
        
        // fleet pw should now be gone
        $this->assertNull($userObj->getFleetPasswd("fleet123"));
    }      
    
    /**
     * tests User::checkOwnFleetWithPlanet()
     * tests for:
     * - creating a fleet flying into nowhere, this should trigger a true
     * - checking when no fleets are flying at all, should return me a false!
     * - checking when we change the planet to a planet where no fleets are set, false!
     */
    public function testCheckOwnFleetWithPlanet( )
    {        
		$testUser = &$this->testData->getNextTestUser();	
        $userObj = Classes::User( $testUser->getName() );
        
        $this->assertTrue($userObj->setActivePlanet(0));
        
        // there shouldnt be any fleets right now
        $this->assertFalse($userObj->checkOwnFleetWithPlanet());
        
        $fleetObj = Classes::Fleet();
        $this->assertTrue($fleetObj->create());
          		                         
        // statio fleet
  		$this->assertTrue($fleetObj->addTarget("1:33:7", 6, false));  		
  		$this->assertTrue($userObj->addFleet($fleetObj->getName()));
        $this->assertEquals($userObj->getName(), $fleetObj->addUser($userObj->getName(), $userObj->getPosString(), 1));
        
        // now we should have a fleet flying from our planet
        $this->assertTrue($userObj->checkOwnFleetWithPlanet());   

        // to this planet there shouldnt be any fleets flying, so we want a false here
        $this->assertTrue($userObj->setActivePlanet(1));
        $this->assertFalse($userObj->checkOwnFleetWithPlanet()); 
    } 

    /**
     * tests User::getFleetsWithPlanet()
     * tests for:
     * - no fleets are flying at all, should return an empty array!
     * - set some fleets, should return them within an array
     * - change planet to one where no fleets were sent, should return empty array again
     */
    public function testGetFleetsWithPlanet( )
    {        
		$testUser = &$this->testData->getNextTestUser();	
        $userObj = Classes::User( $testUser->getName() );

        $this->assertTrue($userObj->setActivePlanet(5));
        
        // there shouldnt be any fleets right now
        $this->assertEquals(array(), $userObj->getFleetsWithPlanet());
        $testFleetIDs = array();
        
        // loop me some fleets to test and save their ids for testing
        for($i = 0; $i < 2; $i++)
        {
            $flID = "fleet".$i;
            $fleetObj = Classes::Fleet($flID);
            $this->assertTrue($fleetObj->create());
          		                         
            // statio fleet into nowhere
  		    $this->assertTrue($fleetObj->addTarget("1:33:7", 6, false));  		
  		    $this->assertTrue($userObj->addFleet($fleetObj->getName()));
            $this->assertEquals($userObj->getName(), $fleetObj->addUser($userObj->getName(), $userObj->getPosString(), 1));
            $testFleetIDs[] = $fleetObj->getName();
        }
        
        // now we should have some fleets flying from our planet
        $this->assertGreaterThanOrEqual(0, array_search($testFleetIDs[0], $userObj->getFleetsWithPlanet(), true));
        $this->assertGreaterThanOrEqual(0, array_search($testFleetIDs[1], $userObj->getFleetsWithPlanet(), true));
        $this->assertEquals(count($testFleetIDs), count($userObj->getFleetsWithPlanet()));   

        // to this planet there shouldnt be any fleets flying, so we want an empty array
        $this->assertTrue($userObj->setActivePlanet(6));

        $this->assertEquals(array(), $userObj->getFleetsWithPlanet());
    }      
    
    /**
     * tests User::getFleetsForUmode()
     * tests for:
     * - no fleets, should return false
     * - add at least 2 fleets, flying into somewhere, it should get returned
     * - add a fleet which is flying back, should return false
     */
    public function testGetFleetsForUmode( )
    {        
		$testUser = &$this->testData->getNextTestUser();	
        $userObj = Classes::User( $testUser->getName() );
    
        $userObj->setActivePlanet(0);
        
        // no fleets, should return false
        $this->assertFalse($userObj->getFleetsForUmode());
        
        // create new fleet0
        $fleetObj1 = Classes::Fleet("fl1336");
        $this->assertTrue($fleetObj1->create());

        // statio fleet flying back
  		$this->assertTrue($fleetObj1->addTarget("1:33:7", 6, true));  		
  		$this->assertTrue($userObj->addFleet($fleetObj1->getName()));
        $this->assertEquals($userObj->getName(), $fleetObj1->addUser($userObj->getName(), $userObj->getPosString(), 1));           
        
        // fleet flying back, there shouldnt be any umode fleets now
        $this->assertFalse($userObj->getFleetsForUmode());              
        
        // create new fleet1
        $fleetObj1 = Classes::Fleet("fl1337");
        $this->assertTrue($fleetObj1->create());

        // statio fleet
  		$this->assertTrue($fleetObj1->addTarget("1:33:7", 6, false));  		
  		$this->assertTrue($userObj->addFleet($fleetObj1->getName()));
        $this->assertEquals($userObj->getName(), $fleetObj1->addUser($userObj->getName(), $userObj->getPosString(), 1));       

        // create new fleet2
        $fleetObj2 = Classes::Fleet("fl1338");
        $this->assertTrue($fleetObj2->create());

        // statio fleet
  		$this->assertTrue($fleetObj2->addTarget("1:33:8", 6, false));  		
  		$this->assertTrue($userObj->addFleet($fleetObj2->getName()));
        $this->assertEquals($userObj->getName(), $fleetObj2->addUser($userObj->getName(), $userObj->getPosString(), 1));          
        
        // active fleets, should return both fleet ids
        $this->assertEquals(array( "fl1337", "fl1338"), $userObj->getFleetsForUmode());                    
    }      
    
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////// TESTS END HERE //////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}

// Call userTest::main() if this source file is executed directly.
if ( PHPUnit_MAIN_METHOD == 'userTest::main' )
{
    userTest::main();
}
?>
